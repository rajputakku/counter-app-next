{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { INCREMENT_COUNTER, DECREMENT_COUNTER } from \"../actions/types\";\n\nvar counterReducer = function counterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    value: 0\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: value + 1\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["/Users/apple/Downloads/react-native/counter-app-next/redux/reducers/counterReducer.js"],"names":["INCREMENT_COUNTER","DECREMENT_COUNTER","counterReducer","state","value","action","type"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA4BC,iBAA5B,QAAqD,kBAArD;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAyB;AAAA,MAAXC,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,iBAAL;AACE,6CAAYG,KAAZ;AAAmBC,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAlC;;AACF,SAAKH,iBAAL;AACE,6CAAYE,KAAZ;AAAmBC,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAlC;;AACF;AACE,+BAAYD,KAAZ;AANJ;AAQD,CATD;;AAUA,eAAeD,cAAf","sourcesContent":["import { INCREMENT_COUNTER, DECREMENT_COUNTER } from \"../actions/types\";\n\nconst counterReducer = (state = { value: 0 }, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return { ...state, value: value + 1 };\n    case DECREMENT_COUNTER:\n      return { ...state, value: value - 1 };\n    default:\n      return { ...state };\n  }\n};\nexport default counterReducer;\n"]},"metadata":{},"sourceType":"module"}